version: '3.8'

services:
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      -   nesjs-network
    restart: unless-stopped
  dev-db:
    container_name: postgres
    image: postgres:12
    env_file:
      - .development.env
    networks:
      - nesjs-network
    environment:
      PG_DATA: /var/lib/postgresql/data
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
  dev:
    container_name: nestjs_api_dev
    image: nestjs-api-dev:1.0.0
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:dev
    ports:
      - '4000:4000'
      - '9229:9229'
    networks:
      - nesjs-network
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - dev-db
      - pgadmin
    restart: unless-stopped
  postgres:
    container_name: postgres
    image: postgres:12
    env_file:
      - .production.env
    networks:
      - nesjs-network
    environment:
      PG_DATA: /var/lib/postgresql/data
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
  prod:
    container_name: nestjs_api_prod
    image: nestjs-api-prod:1.0.0
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - '5000:5000'
      - '9229:9229'
    networks:
      - nesjs-network
    env_file:
      - .production.env
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - pgadmin
    restart: unless-stopped

volumes:
  pgdata:
  pgadmin:
networks:
  nesjs-network: